search = 탐색
많은 양의 데이터 중에서 원하는 데이터를 찾는 과정

알아야 할 자료구조 두 가지 : 스택(STACK), 큐(QUEUE)
대표적인 탐색 알고리즘 두 가지 : BFS, DFS

1. 자료구조 
  - 삽입(push), 삭제(pop)

  1) 스택
  -FILO(First In Last Out)
  -박스 형태의 구조
  -기본 리스트에서 append(), pop() 메서드를 이용 각각은 삽입, 삭제의 기능을 함

  2) 큐
  -FIFO(First In First Out)
  -양쪽이 뚫린 휴지심 형태의 구조
  -collections 모듈에서 제공하는 deque 자료구조를 활용
  --> from collections import deque
  --> queue = deque() 
  --> queue.append(5)
  --> queue.popleft(5)
  

2. 탐색 알고리즘
  1) 그래프(Graph)
    - 노드(Node)(=정점(Vertex)), 간선(Edge))
    - 하나의 간선에 의해 연결 되어 있는 두 노드 --> 인접(Adjacent)하다
    - 표현 방식
      1)인접행렬(Adjacency Matrix) : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
      - 모든 관계를 저장 -> 노드 개수가 많아질수록 메모리낭비 커짐
      - 연결 정보 확인이 빠름
      - 2차원 리스트로 구현
      --> graph = [
        [1,2,3],
        [4,5,6],
        [7,8,9],
      ]

      2)인접리스트(Adjacency List) : 리스트로 그래프의 연결 관계를 표현하는 방식
      - 인접한 정보만을 저장 -> 메모리 효율적
      - 연결 정보 확인이 보다 느림
      - 2차원 리스트로 구현
      --> graph = [[] for _ in range(3)]  (행이 3개인 2차원 리스트)
      --> graph[0].append((1,7))          (노드0에 연결된 노드 정보 저장(노드,거리))
      --> graph[1].append((2,3))          (노드1에 연결된 노드 정보 저장(노드,거리)) 
      
   2) BFS(Breath First Search)
   - 너비우선탐색
   - 그래프에서 가까운 노드부터 탐색하는 알고리즘 
   - 큐 자료구조 사용
   - 인접한 노드를 차례대로 큐에 넣으면서 탐색

   3) DFS  
   - 깊이우선탐색
   - 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
   - 스택 자료구조나 재귀 함수 사용
   



